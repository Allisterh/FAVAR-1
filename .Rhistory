bigai
bigj %*% bigai
bigj
bigj <- zeros(p,p)
bigj <- matlab::eye(p)
bigj
bigai
bigj %*% bigai %*% t(bigj) %*% shock
bigj %*% bigai
bigj %*% bigai %*% t(bigj)
bigai %*% shock
t(bigai) %*% shock
shock
bigj <- zeros(p,p * plag)
bigj[1:p,1:p] <- matlab::eye(p)
bigj
View(PHI_mat)
devtools::install_github('common2016/MyFun')
devtools::install_github('common2016/MyFun')
library(MyFun)
?ar2ma
ar2ma(PHI_mat,p = 2, n= 11,FALSE)
View(impresp)
ar2ma(PHI_mat)
macoef <- ar2ma(PHI_mat, p = plag, n = nhor)
macoef <- ar2ma(PHI_mat, p = plag, n = nhor)
View(macoef)
j=1
macoef[[j]]  %*% shock
View(shock)
imp_m = zeros(p,nhor)
jj <- 0
for (ij in 1:nhor){
jj = jj + p
imp_m[,ij] = impresp[,jj]
}
L%*%imp_m
imp_m
# bigai <- biga
for (j in 1:(nhor-1)){
impresp[,(j*p+1):((j+1)*p)] <- macoef[[j]]  %*% shock
}
imp_m <- zeros(p,nhor)
jj <- 0
for (ij in 1:nhor){
jj = jj + p
imp_m[,ij] = impresp[,jj]
}
L%*%imp_m
View(ans)
Lamd[i,,]
MCMCpack::MCMCregress(dep ~ .-1, data = meddata, burnin = nburn, mcmc = nrep,
B0 = Li_prvar, sigma.mu = SIGMA[i,i], c0 = a, d0 = b,
b0 = matrix(0, 5))
Lamd[i,,] %>% dim()
## code to prepare `xdata` dataset goes here
rm(list = ls())
library(pacman)
p_load(matlab,R.matlab,tidyverse,MyFun)
devtools::load_all()
if (FALSE){
regdata <- readMat('../FAVAR_matlab/regdata.mat')
X <- regdata$X
Y <- regdata$Y
namesXY <- as.character(unlist(regdata$namesXY))
slowcode <- read.table('../FAVAR_matlab/slowcode.dat')
save(X,Y,namesXY,slowcode, file = 'data-raw/regdata.rdata')
}else load('data-raw/regdata.rdata')
Tn <- nrow(Y)
N <- ncol(X)
M <- ncol(Y)
nrep <- 15000
nburn <- 5000
nthin <- 1
it_print = 100
constant <- 1
K <- 2 # factors NO.
plag <- 2 # VAR lag order
#--------------
p <- K + M
X_st <- scale(X, center = FALSE)
F0 <- ExtrPC(X_st,K)$F0
Lf <- ExtrPC(X_st,K)$Lf
xslow <- X[,as.logical(unlist(slowcode))]
Fslow0 <- ExtrPC(xslow,K)$F0
Fr0 <- facrot(F0, matrix(Y[,ncol(Y)],ncol = 1),Fslow0)
X <- X_st
Y = scale(Y,center = FALSE)
XY <-  cbind(X,Y)
FY <- cbind(Fr0, Y)
L <- t(olssvd(XY, FY))
SIGMA <- (t(XY - FY %*% t(L)) %*% (XY - FY %*% t(L)))/Tn
SIGMA <- diag(diag(SIGMA))
Li_prvar <- 4 * matlab::eye(p) # prior on Li ~ N(o,I)
a <- b <- 0.01 # prior on SIGMA ~ iG(a,b)
# X = F + Y: sampling
Lamd <- array(0,ncol(X),dim = c(nrep, p+1))
for (i in 1:ncol(X)) {
meddata <- data.frame(dep = X[,i]) %>% cbind(as.data.frame(FY))
ans <- MCMCpack::MCMCregress(dep ~ .-1, data = meddata, burnin = nburn, mcmc = nrep,
B0 = Li_prvar, sigma.mu = SIGMA[i,i], c0 = a, d0 = b,
b0 = matrix(0, 5))
Lamd[,,i] <- ans
}
# VAR
z <- ts(FY,1,nrow(FY))
ans <- BayesVAR(z, plag, iter = nrep+nburn, burnin = nburn, prior = 'none', type = 'none')
# X = F + Y: sampling
Lamd <- array(0,dim = c(nrep,ncol(X),p+1))
for (i in 1:ncol(X)) {
meddata <- data.frame(dep = X[,i]) %>% cbind(as.data.frame(FY))
ans <- MCMCpack::MCMCregress(dep ~ .-1, data = meddata, burnin = nburn, mcmc = nrep,
B0 = Li_prvar, sigma.mu = SIGMA[i,i], c0 = a, d0 = b,
b0 = matrix(0, 5))
Lamd[,,i] <- ans
}
dim(ans)
# X = F + Y: sampling
Lamd <- array(0,dim = c(nrep,p+1,ncol(X),))
for (i in 1:ncol(X)) {
meddata <- data.frame(dep = X[,i]) %>% cbind(as.data.frame(FY))
ans <- MCMCpack::MCMCregress(dep ~ .-1, data = meddata, burnin = nburn, mcmc = nrep,
B0 = Li_prvar, sigma.mu = SIGMA[i,i], c0 = a, d0 = b,
b0 = matrix(0, 5))
Lamd[,,i] <- ans
}
# X = F + Y: sampling
Lamd <- array(0,dim = c(nrep,p+1,ncol(X)))
for (i in 1:ncol(X)) {
meddata <- data.frame(dep = X[,i]) %>% cbind(as.data.frame(FY))
ans <- MCMCpack::MCMCregress(dep ~ .-1, data = meddata, burnin = nburn, mcmc = nrep,
B0 = Li_prvar, sigma.mu = SIGMA[i,i], c0 = a, d0 = b,
b0 = matrix(0, 5))
Lamd[,,i] <- ans
}
nhor <- 21 # Impulse response horizon
shock_init <- diag(c(zeros(1,p-1), 1/stdffr)) # in terms of standard deviation, identification is recursive
imp <- zeros(nrep,N+M,nhor)
bigj <- zeros(p,p * plag)
bigj[1:p,1:p] <- matlab::eye(p)
i <- 1
PHI_mat <- matrix(ans$A[,i],nrow = p, byrow = FALSE)
macoef <- ar2ma(PHI_mat, p = plag, n = nhor, CharValue = FALSE)
# biga <- PHI_mat
shock <- matrix(ans$sigma[,i],nrow = p, byrow = FALSE) %>% chol() %>% t()
d <- diag(diag(shock))
shock <- solve(d) %*% shock
impresp <- zeros(p,p*nhor)
impresp[1:p,1:p] <- shock
# bigai <- biga
for (j in 1:(nhor-1)){
impresp[,(j*p+1):((j+1)*p)] <- macoef[[j]]  %*% shock
}
imp_m <- zeros(p,nhor)
jj <- 0
for (ij in 1:nhor){
jj = jj + p
imp_m[,ij] = impresp[,jj]
}
source('E:/27_MyRPackages/FAVAR/FAVAR/data-raw/xdata.R', echo=TRUE)
t(Lamd[i,,])%*%imp_m
dim(Lamd[i,,])
dim(t(Lamd[i,,]))
t(Lamd[i,1:p,])%*%imp_m
Y[,ncol(Y)]
View(Y)
ncol(ans$A)
devtools::load_all()
ans <- FAVAR(Y, X, slowcode, nrep = 15000, nburn = 5000, K = 2, plag = 2, nhor = NULL)
View(ans)
ans <- FAVAR(Y, X, slowcode, nrep = 10000, nburn = 3000, K = 2, plag = 2, nhor = 30)
View(ans)
ans$imp[1,,]
View(imp_m)
(nrow(imp_m)-3):nrow(imp_m)
(nrow(imp_m)-2):nrow(imp_m)
imp_m[(nrow(imp_m)-2):nrow(imp_m),]
imp[1,118,]
dim(imp)
dim(imp)[2]-2
for (i in 1:ncol(X)) {
meddata <- data.frame(dep = X[,i]) %>% cbind(as.data.frame(FY))
ans <- MCMCpack::MCMCregress(dep ~ .-1, data = meddata, burnin = nburn, mcmc = nrep,
B0 = Li_prvar, sigma.mu = SIGMA[i,i], c0 = a, d0 = b,
b0 = matrix(0, 5))
Lamb[,,i] <- ans
}
# X = F + Y: sampling
Lamb <- array(0,dim = c(nrep,p+1,ncol(X)))
for (i in 1:ncol(X)) {
meddata <- data.frame(dep = X[,i]) %>% cbind(as.data.frame(FY))
ans <- MCMCpack::MCMCregress(dep ~ .-1, data = meddata, burnin = nburn, mcmc = nrep,
B0 = Li_prvar, sigma.mu = SIGMA[i,i], c0 = a, d0 = b,
b0 = matrix(0, 5))
Lamb[,,i] <- ans
}
varrlt <- BayesVAR(z, plag, iter = nrep+nburn, burnin = nburn, prior = 'none', type = 'none')
sd(Y[,ncol(Y)])
View(Y)
devtools::load_all()
ans <- FAVAR(Y, X, slowcode, nrep = 10000, nburn = 3000, K = 2, plag = 2, nhor = 30)
devtools::load_all()
ans <- FAVAR(Y, X, slowcode, nrep = 10000, nburn = 3000, K = 2, plag = 2, nhor = 30)
t(Lamb[i,1:p,]) %*% imp_m
a <- t(Lamb[i,1:p,]) %*% imp_m
dim(imp)
devtools::load_all()
ans <- FAVAR(Y, X, slowcode, nrep = 10000, nburn = 3000, K = 2, plag = 2, nhor = 30)
View(ans)
## code to prepare `xdata` dataset goes here
rm(list = ls())
library(pacman)
p_load(matlab,R.matlab,tidyverse,MyFun)
devtools::load_all()
if (FALSE){
regdata <- readMat('../FAVAR_matlab/regdata.mat')
X <- regdata$X
Y <- regdata$Y
namesXY <- as.character(unlist(regdata$namesXY))
slowcode <- read.table('../FAVAR_matlab/slowcode.dat')
save(X,Y,namesXY,slowcode, file = 'data-raw/regdata.rdata')
}else load('data-raw/regdata.rdata')
p_load(matlab,R.matlab,tidyverse,MyFun)
fit <- FAVAR(Y, X, slowcode, nrep = 15000, nburn = 5000, K = 2, plag = 2, nhor = 30)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode, nrep = 15000, nburn = 5000, K = 2, plag = 2, nhor = 30)
p_load(matlab,R.matlab,tidyverse,MyFun,bvartools)
p_load(matlab,R.matlab,tidyverse,MyFun,bvartools)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode, nrep = 15000, nburn = 5000, K = 2, plag = 2, nhor = 30)
View(fit)
?unlist
a <- matrix(0,1,2)
b <- matrix(0,2,2)
a <- matrix(0,2,2)
c(a,b)
library(foreach)
?foreach
?princomp
fit <- FAVAR(Y, X, slowcode, nrep = 15000, nburn = 5000, K = 2, plag = 2, nhor = 30)
ExtrPC(X,K)
princomp(X)
ans <- princomp(X)
View(ans)
ans[["scores"]]
ans[["scores"]][,1:2]
ExtrPC(X,K)
ans[["loadings"]]
princomp(X)
ans <- princomp(X)
ans$loadings[,1:2]
a <- eigen(t(X) %% X)
a <- eigen(t(X) %*% X)
a$vectors[,1:2]
p_load(matlab,R.matlab,tidyverse,MyFun,bvartools)
devtools::load_all()
?lm
## code to prepare `xdata` dataset goes here
rm(list = ls())
library(pacman)
p_load(matlab,R.matlab,tidyverse,MyFun,bvartools)
devtools::load_all()
if (FALSE){
regdata <- readMat('../FAVAR_matlab/regdata.mat')
X <- regdata$X
Y <- regdata$Y
namesXY <- as.character(unlist(regdata$namesXY))
slowcode <- read.table('../FAVAR_matlab/slowcode.dat')
save(X,Y,namesXY,slowcode, file = 'data-raw/regdata.rdata')
}else load('data-raw/regdata.rdata')
K = 2
R <- Y[,3]
pc <- ExtrPC(X,K)$F0
cbind(pc,R)
t(cbind(pc,R)) %*% cbind(pc,R)
xdata <- cbind(pc,R)
solve(t(xdata) %*% xdata) %*% t(xdata) %*% R
pc <- ExtrPC(X,K)$F0
xdata <- cbind(pc,R)
solve(t(xdata) %*% xdata) %*% t(xdata) %*% R
solve(t(xdata) %*% xdata) %*% t(xdata) %*% X
R %*% b[nrow(b),]
b <- solve(t(xdata) %*% xdata) %*% t(xdata) %*% X
R %*% b[nrow(b),]
matrix(R,ncol = 1) %*% b[nrow(b),]
X - matrix(R,ncol = 1) %*% b[nrow(b),]
niter = 10
for (i in 1:niter) {
pc <- ExtrPC(X,K)$F0
xdata <- cbind(pc,R)
b <- solve(t(xdata) %*% xdata) %*% t(xdata) %*% X
X <- X - matrix(R,ncol = 1) %*% b[nrow(b),]
}
pc
t(pc) %*% R
t(scale(pc)) %*% scale(R)
niter = 100
for (i in 1:niter) {
pc <- ExtrPC(X,K)$F0
xdata <- cbind(pc,R)
b <- solve(t(xdata) %*% xdata) %*% t(xdata) %*% X
X <- X - matrix(R,ncol = 1) %*% b[nrow(b),]
}
apply(pc,2,scale)
t(apply(pc,2,scale)) %*% scale(R)
devtools::load_all()
BGM(X,R,niter = 10)
BGM(X,R,niter = 20)
BGM(X,R,niter = 100)
rm(list = ls())
library(pacman)
p_load(matlab,R.matlab,tidyverse,MyFun,bvartools)
devtools::load_all()
if (FALSE){
regdata <- readMat('../FAVAR_matlab/regdata.mat')
X <- regdata$X
Y <- regdata$Y
namesXY <- as.character(unlist(regdata$namesXY))
slowcode <- read.table('../FAVAR_matlab/slowcode.dat')
save(X,Y,namesXY,slowcode, file = 'data-raw/regdata.rdata')
}else load('data-raw/regdata.rdata')
BGM(X,Y[,ncol(Y)],niter = 100)
BGM(X,Y[,ncol(Y)],niter = 1)
BGM(X,Y[,ncol(Y)],niter = 2)
BGM(X,Y[,ncol(Y)],niter = 3)
BGM(X,Y[,ncol(Y)],niter = 4)
BGM(X,Y[,ncol(Y)],niter = 8)
BGM(X,Y[,ncol(Y)],niter = 11)
BGM(X,Y[,ncol(Y)],niter = 12)
BGM(X,Y[,ncol(Y)],niter = 20)
BGM(X,Y[,ncol(Y)],niter = 30)
BGM(X,Y[,ncol(Y)],niter = 40)
BGM(X,Y[,ncol(Y)],niter = 100)
regdata <- readMat('../FAVAR_matlab/regdata.mat')
X <- regdata$X
Y <- regdata$Y
namesXY <- as.character(unlist(regdata$namesXY))
slowcode <- read.table('../FAVAR_matlab/slowcode.dat')
slowcode <- as.logical(unlist(slowcode))
save(X,Y,namesXY,slowcode, file = 'data-raw/regdata.rdata')
fit <- FAVAR(Y, X, slowcode, nrep = 15000, nburn = 5000, K = 2, plag = 2, nhor = 30)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode, nrep = 15000, nburn = 5000, K = 2, plag = 2, nhor = 30)
View(fit)
ans <- imp[,3,]
ans <- fit$imp[,3,]
View(Y)
irf <- fit$imp[,3,]
apply(irf, 2, median)
irf <- fit$imp[,118,]
apply(irf, 2, median)
?quantile
apply(irf, 2, quantile, probs = 0.975)
picdata <- data.frame(irf = apply(irf, 2, median),
up = apply(irf, 2, quantile, probs = 0.9),
dw = apply(irf, 2, quantile, probs = 0.1))
View(picdata)
picdata <- data.frame(nhor = 1:nrow(irf),
irf = apply(irf, 2, median),
up = apply(irf, 2, quantile, probs = 0.9),
dw = apply(irf, 2, quantile, probs = 0.1))
ggplot(picdata, aes(x = nhor, y = irf)) + geom_line()
picdata <- data.frame(irf = apply(irf, 2, median),
up = apply(irf, 2, quantile, probs = 0.9),
dw = apply(irf, 2, quantile, probs = 0.1))
picdata$nhor <- 1:nrow(picdata)
ggplot(picdata, aes(x = nhor, y = irf)) + geom_line()
p <- ggplot(picdata, aes(x = nhor, y = irf)) + geom_line() +
geom_line(aes(y = up), linetype = 2) +
geom_line(aes(y = dw), linetype = 2) + theme_bw()
p <- ggplot(picdata, aes(x = nhor, y = irf)) + geom_line() +
geom_line(aes(y = up), linetype = 2) +
geom_line(aes(y = dw), linetype = 2) + theme_bw()
p
nvar <- 117
irf <- fit$imp[,nvar,]
picdata <- data.frame(irf = apply(irf, 2, median),
up = apply(irf, 2, quantile, probs = 0.9),
dw = apply(irf, 2, quantile, probs = 0.1))
picdata$nhor <- 1:nrow(picdata)
p <- ggplot(picdata, aes(x = nhor, y = irf)) + geom_line() +
geom_line(aes(y = up), linetype = 2) +
geom_line(aes(y = dw), linetype = 2) + theme_bw()
p
nvar <- 116
irf <- fit$imp[,nvar,]
picdata <- data.frame(irf = apply(irf, 2, median),
up = apply(irf, 2, quantile, probs = 0.9),
dw = apply(irf, 2, quantile, probs = 0.1))
picdata$nhor <- 1:nrow(picdata)
p <- ggplot(picdata, aes(x = nhor, y = irf)) + geom_line() +
geom_line(aes(y = up), linetype = 2) +
geom_line(aes(y = dw), linetype = 2) + theme_bw()
p
devtools::load_all()
irfFAVAR(fit,118)
?scale
devtools::load_all()
fit <- FAVAR(Y, X, slowcode, nrep = 15000, nburn = 5000, K = 2, plag = 2, nhor = 20)
irfFAVAR(fit,118)
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BGM', nrep = 15000, nburn = 5000, K = 2, plag = 2, nhor = 20)
irfFAVAR(fit,118)
devtools::document()
?FAVAR
devtools::document()
?FAVAR
devtools::document()
?FAVAR
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, eval = FALSE)
# 查看一个属于泛型函数的所有方法：
methods('mean')
# 反过来，查看一个类，都有何关联的泛型函数
methods(class = 'ts')
## code to prepare `xdata` dataset goes here
rm(list = ls())
library(pacman)
p_load(matlab,R.matlab,tidyverse,MyFun,bvartools)
devtools::load_all()
if (FALSE){
regdata <- readMat('../FAVAR_matlab/regdata.mat')
X <- regdata$X
Y <- regdata$Y
namesXY <- as.character(unlist(regdata$namesXY))
slowcode <- read.table('../FAVAR_matlab/slowcode.dat')
slowcode <- as.logical(unlist(slowcode))
save(X,Y,namesXY,slowcode, file = 'data-raw/regdata.rdata')
}else load('data-raw/regdata.rdata')
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE', nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
class(fit)
p_load(matlab,R.matlab,tidyverse,MyFun,bvartools)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE', nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
irfFAVAR(fit,118)
library(devtools)
use_package('ggplot2')
?ggplot
## code to prepare `xdata` dataset goes here
rm(list = ls())
library(pacman)
p_load(matlab,R.matlab,tidyverse,MyFun,bvartools)
devtools::load_all()
if (FALSE){
regdata <- readMat('../FAVAR_matlab/regdata.mat')
X <- regdata$X
Y <- regdata$Y
namesXY <- as.character(unlist(regdata$namesXY))
slowcode <- read.table('../FAVAR_matlab/slowcode.dat')
slowcode <- as.logical(unlist(slowcode))
save(X,Y,namesXY,slowcode, file = 'data-raw/regdata.rdata')
}else load('data-raw/regdata.rdata')
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
u_sigma_i
a_mu_prior
a_v_i_prior
diag(0, m)
diag(matrix(a_v_i_prior, ncol = 1),m)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
diag(matrix(a_v_i_prior, ncol = 1),m)
diag(as.numeric(a_v_i_prior, ncol = 1),m)
as.numeric(a_v_i_prior)
a_v_i_prior
a_v_i_prior <- diag(as.numeric(a_v_i_prior),m)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
summary(varrlt)
summary(varrlt$A)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
u_sigma_i
a_mu_prior
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
varrlt1 <- BayesVAR(z, plag, iter = nrep+nburn, burnin = nburn, prior = 'none', type = 'none')
varrlt$A
rowMeans(varrlt$A)
rowMeans(varrlt1$A)
example("minnesota_prior")
View(prior)
prior[["v_i"]]
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
ans$v_i
sqrt(0.5)
ans <- bvartools::minnesota_prior(data,0.7,1)
ans$v_i
1/0.5
1/0.49
devtools::load_all()
devtools::load_all()
fit <- FAVAR(Y, X, slowcode,fctmethod = 'BBE',varprior = 'mn',
nrep = 500, nburn = 100, K = 2, plag = 2, nhor = 20)
varrlt1 <- BayesVAR(z, plag, iter = nrep+nburn, burnin = nburn, prior = 'none', type = 'none')
rowMeans(varrlt$A)
rowMeans(varrlt1$A)
example("minnesota_prior")
prior$mu
